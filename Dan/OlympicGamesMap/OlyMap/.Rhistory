lats <- vector()
longs <- vector()
for(i in length(tst$team)){
lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
}
countryGeo[which(countryGeo$name == tst[1,1]), 2]
tst[1,]
View(tst)
for(i in length(tst$team)){
lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
}
for(i in length(tst$team)){
tst$lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
}
for(i in length(tst$team)){
print(tst$team[i])
tst$lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
}
for(i in 1:length(tst$team)){
tst$lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
}
for(i in 1:length(tst$team)){
tst$lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
tst$longs[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 3]
}
knitr::opts_chunk$set(echo = TRUE)
#Created a function to Check for NA values
checkForNaValuesInColumn <- function(vec, colname){
numberOfNas <-length(vec[is.na(vec)])
print(colname)
print(numberOfNas)
}
#read the CSV, Create a Data Frame from each Dataset
athleteEvents <- data.frame(read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\athlete_events.csv"))
nocRegions <- data.frame(read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\noc_regions.csv"))
#Grab the column names for reference
athleteColumnNames <- colnames(athleteEvents)
regionColnames <- colnames(nocRegions)
#Replace NA values for Medals with "None", we can assume a NA == no medal, however we can't assume the same for any other values
athleteEvents$Medal[is.na(athleteEvents$Medal)] <- "None"
#check For NA values
checkForNaValuesInColumn(athleteEvents$Name, "Name")
checkForNaValuesInColumn(athleteEvents$Sex, "Sex")
checkForNaValuesInColumn(athleteEvents$Age, "Age")
checkForNaValuesInColumn(athleteEvents$Height, "Height")
checkForNaValuesInColumn(athleteEvents$Weight, "Weight")
checkForNaValuesInColumn(athleteEvents$Team, "Team")
checkForNaValuesInColumn(athleteEvents$NOC, "NOC")
checkForNaValuesInColumn(athleteEvents$Games, "Games")
checkForNaValuesInColumn(athleteEvents$Year, "Year")
checkForNaValuesInColumn(athleteEvents$Season, "Season")
checkForNaValuesInColumn(athleteEvents$Sport, "Sport")
checkForNaValuesInColumn(athleteEvents$City, "City")
checkForNaValuesInColumn(athleteEvents$Event, "Event")
checkForNaValuesInColumn(athleteEvents$Medal, "Medal")
#Omit all NA rows within the Athlete Events Data Frame
athletes1 <- na.omit(athleteEvents)
print("Number of Omitted Rows")
print(length(athleteEvents$ID)-length(athletes1$ID))
#Reivew the Data Frame
str(athletes1)
#Convert CM to Feet (Decimal)
athletes1$Height <- athletes1$Height / 30.48
#Convert KG to lbs
athletes1$Weight <- athletes1$Weight * 2.2
#View Distribution
hist(athletes1$Height)
plot(athletes1$Height)
knitr::opts_chunk$set(echo = TRUE)
#Created a function to Check for NA values
checkForNaValuesInColumn <- function(vec, colname){
numberOfNas <-length(vec[is.na(vec)])
print(colname)
print(numberOfNas)
}
#read the CSV, Create a Data Frame from each Dataset
athleteEvents <- data.frame(read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\athlete_events.csv"))
nocRegions <- data.frame(read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\noc_regions.csv"))
#Grab the column names for reference
athleteColumnNames <- colnames(athleteEvents)
regionColnames <- colnames(nocRegions)
#Replace NA values for Medals with "None", we can assume a NA == no medal, however we can't assume the same for any other values
athleteEvents$Medal[is.na(athleteEvents$Medal)] <- "None"
#check For NA values
checkForNaValuesInColumn(athleteEvents$Name, "Name")
checkForNaValuesInColumn(athleteEvents$Sex, "Sex")
checkForNaValuesInColumn(athleteEvents$Age, "Age")
checkForNaValuesInColumn(athleteEvents$Height, "Height")
checkForNaValuesInColumn(athleteEvents$Weight, "Weight")
checkForNaValuesInColumn(athleteEvents$Team, "Team")
checkForNaValuesInColumn(athleteEvents$NOC, "NOC")
checkForNaValuesInColumn(athleteEvents$Games, "Games")
checkForNaValuesInColumn(athleteEvents$Year, "Year")
checkForNaValuesInColumn(athleteEvents$Season, "Season")
checkForNaValuesInColumn(athleteEvents$Sport, "Sport")
checkForNaValuesInColumn(athleteEvents$City, "City")
checkForNaValuesInColumn(athleteEvents$Event, "Event")
checkForNaValuesInColumn(athleteEvents$Medal, "Medal")
#Omit all NA rows within the Athlete Events Data Frame
athletes1 <- na.omit(athleteEvents)
print("Number of Omitted Rows")
print(length(athleteEvents$ID)-length(athletes1$ID))
#Reivew the Data Frame
str(athletes1)
#Convert CM to Feet (Decimal)
athletes1$Height <- athletes1$Height / 30.48
#Convert KG to lbs
athletes1$Weight <- athletes1$Weight * 2.2
#View Distribution
hist(athletes1$Height)
plot(athletes1$Height)
hist(athletes1$Weight)
plot(athletes1$Weight)
summary(athletes1$Height)
summary(athletes1$Weight)
countries <- read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\allCountries.csv")
#Clean up Country Name Strings
library(stringr)
#Match up Countries & Athletes we have locations for, with the change in country names this will affect the data
matchedCoAthIndex<- athletes1[match(athletes1$Team, countries$name),]
matchedCoAthIndex <- na.omit(matchedCoAthIndex)
#Get the Athletes who have never medal'd,We know that countries can medal and not medal one year so we
#must find countries which have not recieved a medal at all
countries <- unique(athletes1$Team)
countries <- lapply(countries, sub, pattern = '\\-1', replacement = '')
countries <- lapply(countries, sub, pattern = '\\-2', replacement = '')
countries <- lapply(countries, sub, pattern = '\\-3', replacement = '')
countryMedalSum <- data.frame()
for(i in 1:length(countries)){
countryMedalSum[i,1] <- countries[i]
countryMedalSum[i,2] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Gold"),])
countryMedalSum[i,3] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Silver"),])
countryMedalSum[i,4] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Bronze"),])
countryMedalSum[i,5] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="None"),])
#Get and Add the sum for each medal
countryMedalSum[i,6] <- sum(
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Gold"),]),
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Silver"),]),
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Bronze"),]),
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="None"),])
)
}
colnames(countryMedalSum) <- c("team", "Gold", "Silver", "Bronze", "None", "Total Athletes")
countryGeo <- read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\allCountries.csv")
countryMedalSum <- countryMedalSum[match(countryGeo$name,countryMedalSum$team),]
countryMedalSum <-na.omit(countryMedalSum)
for(i in 1:length(countryMedalSum$team)){
countryMedalSum$lats[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 2]
countryMedalSum$longs[i] <- countryGeo[which(countryGeo$name == tst[i,1]), 3]
}
knitr::opts_chunk$set(echo = TRUE)
#Created a function to Check for NA values
checkForNaValuesInColumn <- function(vec, colname){
numberOfNas <-length(vec[is.na(vec)])
print(colname)
print(numberOfNas)
}
#read the CSV, Create a Data Frame from each Dataset
athleteEvents <- data.frame(read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\athlete_events.csv"))
nocRegions <- data.frame(read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\noc_regions.csv"))
#Grab the column names for reference
athleteColumnNames <- colnames(athleteEvents)
regionColnames <- colnames(nocRegions)
#Replace NA values for Medals with "None", we can assume a NA == no medal, however we can't assume the same for any other values
athleteEvents$Medal[is.na(athleteEvents$Medal)] <- "None"
#check For NA values
checkForNaValuesInColumn(athleteEvents$Name, "Name")
checkForNaValuesInColumn(athleteEvents$Sex, "Sex")
checkForNaValuesInColumn(athleteEvents$Age, "Age")
checkForNaValuesInColumn(athleteEvents$Height, "Height")
checkForNaValuesInColumn(athleteEvents$Weight, "Weight")
checkForNaValuesInColumn(athleteEvents$Team, "Team")
checkForNaValuesInColumn(athleteEvents$NOC, "NOC")
checkForNaValuesInColumn(athleteEvents$Games, "Games")
checkForNaValuesInColumn(athleteEvents$Year, "Year")
checkForNaValuesInColumn(athleteEvents$Season, "Season")
checkForNaValuesInColumn(athleteEvents$Sport, "Sport")
checkForNaValuesInColumn(athleteEvents$City, "City")
checkForNaValuesInColumn(athleteEvents$Event, "Event")
checkForNaValuesInColumn(athleteEvents$Medal, "Medal")
#Omit all NA rows within the Athlete Events Data Frame
athletes1 <- na.omit(athleteEvents)
print("Number of Omitted Rows")
print(length(athleteEvents$ID)-length(athletes1$ID))
#Reivew the Data Frame
str(athletes1)
#Convert CM to Feet (Decimal)
athletes1$Height <- athletes1$Height / 30.48
#Convert KG to lbs
athletes1$Weight <- athletes1$Weight * 2.2
#View Distribution
hist(athletes1$Height)
plot(athletes1$Height)
hist(athletes1$Weight)
plot(athletes1$Weight)
summary(athletes1$Height)
summary(athletes1$Weight)
countries <- read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\allCountries.csv")
#Clean up Country Name Strings
library(stringr)
#Match up Countries & Athletes we have locations for, with the change in country names this will affect the data
matchedCoAthIndex<- athletes1[match(athletes1$Team, countries$name),]
matchedCoAthIndex <- na.omit(matchedCoAthIndex)
#Get the Athletes who have never medal'd,We know that countries can medal and not medal one year so we
#must find countries which have not recieved a medal at all
countries <- unique(athletes1$Team)
countries <- lapply(countries, sub, pattern = '\\-1', replacement = '')
countries <- lapply(countries, sub, pattern = '\\-2', replacement = '')
countries <- lapply(countries, sub, pattern = '\\-3', replacement = '')
countryMedalSum <- data.frame()
for(i in 1:length(countries)){
countryMedalSum[i,1] <- countries[i]
countryMedalSum[i,2] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Gold"),])
countryMedalSum[i,3] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Silver"),])
countryMedalSum[i,4] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Bronze"),])
countryMedalSum[i,5] <- nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="None"),])
#Get and Add the sum for each medal
countryMedalSum[i,6] <- sum(
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Gold"),]),
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Silver"),]),
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="Bronze"),]),
nrow(athletes1[which(athletes1$Team == countries[i] & athletes1$Medal =="None"),])
)
}
colnames(countryMedalSum) <- c("team", "Gold", "Silver", "Bronze", "None", "Total Athletes")
countryGeo <- read.csv("C:\\Users\\danbu\\Desktop\\OlympicData\\allCountries.csv")
countryMedalSum <- countryMedalSum[match(countryGeo$name,countryMedalSum$team),]
countryMedalSum <-na.omit(countryMedalSum)
for(i in 1:length(countryMedalSum$team)){
countryMedalSum$lats[i] <- countryGeo[which(countryGeo$name == countryMedalSum[i,1]), 2]
countryMedalSum$longs[i] <- countryGeo[which(countryGeo$name == countryMedalSum[i,1]), 3]
}
#write.csv(countryMedalSum, file="medalSums.csv")
colnames(countryMedalSum) <- c("team", "Gold", "Silver", "Bronze", "None", "Total Athletes", "lat", "long")
write.csv(countryMedalSum, file="medalSums.csv")
write.csv(countryMedalSum, "C://Users/danbu//Documents//GitHub//IST687//Dan//Data Cleaning Etc//OlympicData.Rmd", row.names = TRUE, file="medalSums.csv")
path_out = "C:\\Users\\danbu\\Documents\\GitHub\\IST687\\Dan\\Data Cleaning Etc\\medalSums.csv"
fileName = paste(path_out, 'medalSums.csv',sep = '')
write.csv(countryMedalSum,fileName)
path_out = "C:\\Users\\danbu\\Documents\\GitHub\\IST687\\Dan\\Data Cleaning Etc\\"
fileName = paste(path_out, 'medalSums.csv',sep = '')
write.csv(countryMedalSum,fileName)
countryMedals <- read.csv("C:\\Users\\danbu\\Documents\\GitHub\\IST687\\Dan\\OlympicGamesMap\\OlyMap\\medalSums.csv")
countryMedals <- read.csv("C:\\Users\\danbu\\Documents\\GitHub\\IST687\\Dan\\OlympicGamesMap\\OlyMap\\medalSums.csv")
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
?points
?leaflet
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
countryMedals <- read.csv("C:\\Users\\danbu\\Documents\\GitHub\\IST687\\Dan\\OlympicGamesMap\\OlyMap\\medalSums.csv")
countryMedals$Gold <- countryMedals$Gold^2.5
key <- "pk.eyJ1IjoiZHVkZW1hbmRhbmRvIiwiYSI6ImNqd2xqZDhkMzAwM2MzeXBmNWhjejViejUifQ.-qW3K4prGMIY0w7bP3LxUg"
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
!addCircles()
?addCircles()
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
countryMedals$Total.Athletes
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
countries
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
charDf <- data.frame(countryMedals$Gold, countryMedals$Silver, countryMedals$Bronze)
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
install.packages(leaflet.minicharts)
install.packages("leaflet.minicharts")
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
?addMiniCharts
??addMinicharts
?addMiniCharts
?addMinicharts
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
addMinicharts
install.packages("leaflet.minicharts")
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
MiniBarDf <- data.frame(countryMedals$lat, countryMedals$long, countryMedals$Gold, countryMedals$Silver, countryMedals$Bronze)
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
install.packages("leaflet.minicharts")
runApp('~/GitHub/IST687/Dan/OlympicGamesMap/OlyMap')
install.packages("leaflet.minicharts")
shiny::runApp()
runApp()
runApp()
install.packages("leaflet.minicharts")
shiny::runApp()
runApp()
install.packages("leaflet.minicharts")
runApp()
install.packages("leaflet.minicharts")
shiny::runApp()
runApp()
runApp()
install.packages("leaflet.minicharts")
runApp()
runApp()
runApp()
runApp()
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(countryMedals)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scaledTotalAthletes <- scale(countryMedals$Total.Athletes)
runApp()
View(scaledTotalAthletes)
runApp()
runApp()
View(scaledTotalAthletes)
runApp()
runApp()
runApp()
library(scales)
runApp()
runApp()
scaledTotalAthletes <- rescale(countryMedals$Total.Athletes, to = c(0, 1))
runApp()
runApp()
scaledTotalAthletes <- rescale(countryMedals$Total.Athletes, to = c(0, 1))^25
runApp()
scaledTotalAthletes
scaledTotalAthletes <- rescale(countryMedals$Total.Athletes, to = c(0, 1))
scaledTotalAthletes
scaledTotalAthletes <- scaledTotalAthletes^25
scaledTotalAthletes
scaledTotalAthletes <- rescale(countryMedals$Total.Athletes, to = c(0, 1))
scaledTotalAthletes
scaledTotalAthletes <- scaledTotalAthletes/25
scaledTotalAthletes
scaledTotalAthletes <- rescale(countryMedals$Total.Athletes, to = c(1,10))
scaledTotalAthletes
scaledTotalAthletes <- scaledTotalAthletes^25
scaledTotalAthletes
scaledTotalAthletes[1,]
scaledTotalAthletes[1]
scaledTotalAthletes <- scaledTotalAthletes^100
scaledTotalAthletes[1]
runApp()
runApp()
runApp()
runApp()
scaledTotalAthletes <- scaledTotalAthletes^5
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
